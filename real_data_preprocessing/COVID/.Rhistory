View(bulkNorm)
dim(bulkNorm)
library(scDatasets)
library(SummarizedExperiment)
data(deng)
# https://github.com/gongx030/scDatasets
symbol <- deng@elementMetadata@listData[["symbol"]]
X <- assays(deng)$count
dim(X)
X_new <- preprocess(X, min.expressed.gene = 0)
View(X)
symbol
dim(X)
View(X_new)
View(deng)
View(deng)
View(deng)
deng@colData
deng@colData["group"]
type <- deng@colData["group"]
type
length(unique(type))
length(unique(type[,1]))
type <- deng@colData["group"][,1]
type[1]
type <- as.array(deng@colData["group"][,1])
type <- levels(deng@colData["group"][,1])
type <- factor(deng@colData["group"][,1])
length(type)
type <- as.character(deng@colData["group"][,1])
summary(type)
count(type)
summarize(type)
as.data.frame(table(type))
dim(X)
18884 * 0.05
install.packages('remotes')
# Replace '2.3.0' with your desired version
remotes::install_version(package = 'Seurat', version = package_version('2.3.0'))
install.packages('Seurat')
library(Seurat)
install.packages('Seurat')
library(Seurat)
install.packages("Seurat")
library(Seurat)
# remove features with lower than 5% expression
rows <- rowsum(X)
# remove features with lower than 5% expression
rows <- rowSums(X)
# remove features with lower than 5% expression
rows <- rowSums(X==0)
X1 <- X[rows<0.95*dim(X)[2],]
dim(X1)
# select 2000 features with top
a<- FindVariableFeatures(X1, nfeatures = 2000)
a
help("FindVariableFeatures")
dim(X1) # 15416 * 286
# select 2000 features with top
a<- FindVariableFeatures(X1,)
View(a)
View(a)
# select 2000 features with top
a<- FindVariableFeatures(X1)
r <- sort(-a$vst.variance)
r[1]
r <- arhsort(-a$vst.variance)
r <- argsort(-a$vst.variance)
r <- rank(-a$vst.variance)
r[1]
a$vst.variance.standardized
a$vst.variance.standardized[r[1]]
a$vst.variance.standardized[r[2]]
a$vst.variance.standardized[r[3]]
# select 2000 features with top
a<- FindVariableFeatures(X1)
r <- rank(-a$vst.variance.standardized)
r[1]
a$vst.variance.standardized[r[3]]
a$vst.variance.standardized[r[1]]
a$vst.variance.standardized[r[100]]
r <- rank(a$vst.variance.standardized)
r[1]
a$vst.variance.standardized[r[100]]
a$vst.variance.standardized[r[1]]
a$vst.variance.standardized[r[1:10]]
r <- sort(a$vst.variance.standardized)
r[1]
a$vst.variance.standardized[r[1:10]]
r <- order(a$vst.variance.standardized)
r[1]
a$vst.variance.standardized[r[1:10]]
r <- order(-a$vst.variance.standardized)
r[1]
a$vst.variance.standardized[r[1:10]]
X2 <- X1[r[1:2000],]
dim(X2)
df <- X2
df <- X2.T
df <- t(X2)
df
View(df)
df <- t(X2)
df$type <- type
tsne.res = Rtsne(subset(df, select = -type), check_duplicates = FALSE)
tsne.embedding = as.data.frame(tsne.res$Y)
colnames(tsne.embedding) = c('dim.1', 'dim.2')
dim(tsne.embedding)
tsne.plot = ggplot(data = tsne.embedding, aes(x = dim.1, y = dim.2, colour = as.factor(Mean$type))) +
geom_point(size = .8) +
scale_colour_hue(name="Cell-type") +
labs(title = paste(this_go, Term(this_go))) +
theme(title=element_text(size=14))
print(tsne.plot)
# plot
library(Rtsne)
library(ggplot2)
df <- t(X2)
df$type <- type
tsne.res = Rtsne(subset(df, select = -type), check_duplicates = FALSE)
tsne.embedding = as.data.frame(tsne.res$Y)
colnames(tsne.embedding) = c('dim.1', 'dim.2')
dim(tsne.embedding)
tsne.plot = ggplot(data = tsne.embedding, aes(x = dim.1, y = dim.2, colour = as.factor(Mean$type))) +
geom_point(size = .8) +
scale_colour_hue(name="Cell-type") +
labs(title = paste(this_go, Term(this_go))) +
theme(title=element_text(size=14))
print(tsne.plot)
tsne.res = Rtsne(subset(df, select = -type), check_duplicates = FALSE)
library(dplyr)
tsne.res = Rtsne(subset(df, select = -type), check_duplicates = FALSE)
df <- t(X2)
df$type <- type
df <- t(X2)
dim(df)
length(type)
df <- as.data.frame(df)
df$type <- type
tsne.res = Rtsne(subset(df, select = -type), check_duplicates = FALSE)
tsne.embedding = as.data.frame(tsne.res$Y)
colnames(tsne.embedding) = c('dim.1', 'dim.2')
dim(tsne.embedding)
tsne.plot = ggplot(data = tsne.embedding, aes(x = dim.1, y = dim.2, colour = as.factor(Mean$type))) +
geom_point(size = .8) +
scale_colour_hue(name="Cell-type") +
labs(title = paste(this_go, Term(this_go))) +
theme(title=element_text(size=14))
tsne.plot = ggplot(data = tsne.embedding, aes(x = dim.1, y = dim.2, colour = as.factor(Mean$type))) +
geom_point(size = .8) +
scale_colour_hue(name="Cell-type") +
theme(title=element_text(size=14))
print(tsne.plot)
tsne.plot = ggplot(data = tsne.embedding, aes(x = dim.1, y = dim.2, colour = as.factor(df$type))) +
geom_point(size = .8) +
scale_colour_hue(name="Cell-type") +
theme(title=element_text(size=14))
print(tsne.plot)
library(CrossClustering)
install.packages("CrossClustering")
install.packages("CrossClustering")
install
install.packages("aricode")
library(aricode)
data(iris)
cl <- cutree(hclust(dist(iris[,-5])), 4)
ARI(cl,iris$Species)
cl <- cutree(hclust(dist(df[,-1])), 10)
ARI(cl,df$type)
cl
df[,-1]
dim(df,-1)
dim(df[,-1])
dim(df)
a <- df[,-1]
a$type
View(a)
dim(df)
cl <- cutree(hclust(dist(df[,1:2000])), 10)
ARI(cl,df$type)
length(unique(df$type))
cl <- cutree(hclust(dist(df[,1:2000])), 4)
ARI(cl,df$type)
NMI(cl,df$type)
cl <- cutree(hclust(dist(df[,1:2000])), 10)
ARI(cl,df$type)
NMI(cl,df$type)
tsne.plot = ggplot(data = tsne.embedding, aes(x = dim.1, y = dim.2, colour = as.factor(cl))) +
geom_point(size = .8) +
scale_colour_hue(name="Cell-type") +
theme(title=element_text(size=14))
print(tsne.plot)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SC3")
n
library(SC3)
library(SC3)
help(sc3)
SC <- sc3(df[,1:2000], 10)
SC <- sc3.SingleCellExperiment((df[,1:2000], 10)
SC <- sc3.SingleCellExperiment(df[,1:2000], 10)
Z <- assays(deng)$fpkm
X <- assays(deng)$count
Z <- assays(deng)$fpkm
Z1 <- Z[rows<0.95*dim(X)[2],]
Z2 <- Z1[r[1:2000],]
sce <- SingleCellExperiment(assays =
list(fpkm = as.matrix(Z2),
counts = as.matrix(X2)), colData = type)
sce <- SingleCellExperiment(assays =
list(fpkm = as.matrix(Z2),
counts = as.matrix(X2)), colData = type)
library(SC3)
library(SingleCellExperiment)
sce <- SingleCellExperiment(assays =
list(fpkm = as.matrix(Z2),
counts = as.matrix(X2)), colData = type)
dim(Z2)
Z2
X1
X2
View(deng)
sce <- SingleCellExperiment(assays = listcounts = as.matrix(X2)), colData = type)
sce <- SingleCellExperiment(assays = list(counts = as.matrix(X2)), colData = type)
SC <- sc3.SingleCellExperiment(sce, 10)
SC <- sc3(sce, 10)
rownames(X)
rownames(X2)
permuatation_test <- read.csv("~/Downloads/permuatation_test.csv", header=FALSE)
View(permuatation_test)
hist(permuatation_test$V4)
plot(permuatation_test$V3, permuatation_test$V4)
plot(log(permuatation_test$V3), permuatation_test$V4)
colnames(permuatation_test) <- c("", "go", "count", "distance", "pvalue")
plot(log(permuatation_test$count), permuatation_test$distance)
plot(log(permuatation_test$count), permuatation_test$distance, main = "a")
plot(log(permuatation_test$count), permuatation_test$distance, main = "Central distance vs gene count")
hist(permuatation_test$distance)
hist(permuatation_test$pvalue)
library(biocLite)
library(KEGGprofile)
library(BiocManager)
install.packages('installr')
library(installr)
update()
install.packages(‘devtools’) #assuming it is not already installed
library(devtools)
install_github(‘andreacirilloac/updateR’)
library(updateR)
updateR(admin_password = ‘Admin user password’)
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
install.packages("devtools")
library('devtools')
library('devtools')
library(updateR)
install_github('andreacirilloac/updateR')
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'os_admin_user_password')
updateR()
updateR()
BiocManager::install("xMSannotator")
BiocManager::install("xMSannotator", force = TRUE)
install.packages("remotes")
remotes::install_github("yufree/xMSannotator")
library(xMSannotator)
install.packages("remotes")
remotes::install_github("yufree/xMSannotator")
library(xMSannotator)
remotes::install_github("yufree/xMSannotator")
remotes::install_github("sckott/SSOAP")
remotes::install_github("omegahat/XMLSchema")
remotes::install_github("sckott/SSOAP")
remotes::install_github("yufree/xMSannotator")
library(xMSannotator)
library(xMSannotator)
load("raw_data/positive batchwise HMDB 12 0.5 2 0.333333333333333 0.5 0.5 new.Rdata")
rm(list = ls())
getwd()
library(xMSannotator)
setwd("~/OneDrive - CUHK-Shenzhen/数据/COVID-meta-data/COVID_data_preprosessing")
rm(list = ls())
getwd()
library(xMSannotator)
load("raw_data/positive batchwise HMDB 12 0.5 2 0.333333333333333 0.5 0.5 new.Rdata")
g_pos <- g
colnames(g_pos)[2] <- "time"
# positve
K_positive<-KEGG.Annotation(g_pos, max.mz.diff = 5, num_nodes = 10,queryadductlist =
c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H",
"2M+Na", "2M+ACN+H"), mode = "pos",outloc=getwd())
# positve
K_positive<-KEGG.Annotation(g_pos, max.mz.diff = 5, num_nodes = 10,queryadductlist =
c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H",
"2M+Na", "2M+ACN+H"), mode = "pos",outloc=getwd())
# positve
K_positive<-KEGG.Annotation(g_pos, max.mz.diff = 5, num_nodes = 10,queryadductlist =
c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H",
"2M+Na", "2M+ACN+H")) #, mode = "pos", outloc=getwd()
# positve
K_positive<-KEGG.Annotation(g_pos, max.mz.diff = 5, num_nodes = 10,queryadductlist =
c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H",
"2M+Na", "2M+ACN+H"), outloc = getwd()) #, mode = "pos", outloc=getwd()
View(g_pos)
# positve
K_positive<-KEGG.Annotation(g_pos, max.mz.diff = 5, num_nodes = 10,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
outloc = getwd()) #, mode = "pos", outloc=getwd()
help("KEGG.Annotation")
# positve
K_positive<-KEGG.Annotation(g_pos, max.mz.diff = 5, num_nodes = 10,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
View(g_pos)
View(g_pos)
colnames(g_pos)[1] <- "m/z"
# positve
K_positive<-KEGG.Annotation(g_pos[], max.mz.diff = 5, num_nodes = 10,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
# positve
K_positive<-KEGG.Annotation(g_pos[], max.mz.diff = 5, num_nodes = 5,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
# positve
K_positive<-KEGG.Annotation(g_pos[], max.mz.diff = 5, num_nodes = 2,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
# positve
K_positive<-KEGG.Annotation(g_pos[], max.mz.diff = 5, num_nodes = 1,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
# positve
K_positive<-KEGG.Annotation(g_pos[], max.mz.diff = 5, num_nodes = 2,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
# positve
K_positive<-KEGG.Annotation(g_pos[,1:4], max.mz.diff = 5, num_nodes = 2,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
pp <- KEGG.Annotation(g_pos[,1:4], max.mz.diff = 10, num_nodes = 2,
queryadductlist = c("M+2H", "M+H+NH4", "M+ACN+2H",
"M+2ACN+2H", "M+H", "M+NH4", "M+Na", "M+ACN+H",
"M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos", outloc)
pp <- KEGG.Annotation(g_pos[,1:4], max.mz.diff = 10, num_nodes = 2,
queryadductlist = c("M+2H", "M+H+NH4", "M+ACN+2H",
"M+2ACN+2H", "M+H", "M+NH4", "M+Na", "M+ACN+H",
"M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos", outloc=getwd())
View(g_pos)
pp <- KEGG.Annotation(g_pos[,1:4], max.mz.diff = 10, num_nodes = 2,
queryadductlist = c("all"),
mode = "pos", outloc=getwd())
# positve
K_positive<-KEGG.Annotation(g_pos[,1:4], max.mz.diff = 5, num_nodes = 2,
queryadductlist = c("M+H", "M+NH4", "M+Na", "M+ACN+H", "M+ACN+Na", "M+2ACN+H", "2M+H", "2M+Na", "2M+ACN+H"),
mode = "pos",
outloc = getwd()) #, mode = "pos", outloc=getwd()
